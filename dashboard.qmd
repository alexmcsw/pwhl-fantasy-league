---
title: "PWHL Fantasy League"
author: "Noah Bolohan"
format: dashboard
---

```{r imports}
library(tidyverse)
library(gt)
library(bslib)
library(shiny)
library(bsicons)

invisible(
    lapply(
        list.files(
            "./R",
            full.names = TRUE
        ),
        source
    )
)
```

```{r "read API data"}
season_dates_and_type <- get_season_dates_and_type()

current_date = today()
current_date = "2024-05-07"

season_row_idx_for_current_date <- season_dates_and_type |>
(\(x) x$start_date < current_date & x$end_date >= current_date)() |>
which()

last_game_day_date <- "tbd"
next_game_day_date <- "tbd"
season_id <- season_dates_and_type[
    season_row_idx_for_current_date,
    "season_id"
]

if (
    length(
        season_row_idx_for_current_date
    )== 0
) {
    season_row_idx_for_current_date <- season_dates_and_type |>
    (\(x) x$start_date >= current_date)() |>
    which() |>
    first()

    if (
        season_row_idx_for_current_date == 1
    ) {
        last_game_day_date <- NULL
    } else {
        last_game_day_date <- season_dates_and_type[
            season_row_idx_for_current_date - 1,
            "end_date"
        ]
    }

    next_game_day_date <- season_dates_and_type[
        season_row_idx_for_current_date,
        "start_date"
    ]

    season_id <- season_dates_and_type[
        season_row_idx_for_current_date,
        "season_id"
    ]
}

if (
    is.na(
        season_row_idx_for_current_date
    )
) {
    season_row_idx_for_current_date <- rownames(
        season_dates_and_type
    ) |>
    max()

    last_game_day_date <- season_dates_and_type[
        season_row_idx_for_current_date,
        "end_date"
    ]

    next_game_day_date <- NULL
    season_id <- NULL
}

if (
    !is.null(
        season_id
    )
) {
    season = season_dates_and_type |>
    filter(
        season_id == .env$season_id
    ) |>
    select(
        season_yr
    ) |>
    as.numeric()

    game_type <- season_dates_and_type |>
    filter(
        season_id == .env$season_id
    ) |>
    select(
        game_type_label
    ) |>
    as.character()
}

teams <- pwhl_teams(
    season_id = season_id
)

team_logo_urls <- list(
    BOS = "https://upload.wikimedia.org/wikipedia/en/b/bc/BostonFleet.png",
    MIN = "https://upload.wikimedia.org/wikipedia/en/a/ae/MinnesotaFrost.png",
    MTL = "https://upload.wikimedia.org/wikipedia/en/thumb/9/93/Montreal_Victoire_Logo.svg/800px-Montreal_Victoire_Logo.svg.png",
    NY = "https://upload.wikimedia.org/wikipedia/en/thumb/f/f9/New_York_Sirens_Logo.svg/1024px-New_York_Sirens_Logo.svg.png",
    OTT = "https://upload.wikimedia.org/wikipedia/en/thumb/4/40/Ottawa_Charge_Logo.svg/1280px-Ottawa_Charge_Logo.svg.png",
    TOR = "https://upload.wikimedia.org/wikipedia/en/thumb/5/51/Toronto_Sceptres.svg/800px-Toronto_Sceptres.svg.png"
)

if (
    season_id >= 7
) {
    team_logo_urls <- c(
        team_logo_urls,
        SEA = "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f0/PWHL_Seattle_Logo.webp/800px-PWHL_Seattle_Logo.webp.png",
        VAN = "https://upload.wikimedia.org/wikipedia/commons/thumb/5/58/VAN_PWHL.webp/400px-VAN_PWHL.webp.png"
    )
}

team_codes <- teams$team_code

names(team_codes) <- teams$team_label |>
recode(
    "Montreal"="Montr√©al"
)

all_teams <- team_stats(
    season = season,
    teams = teams,
    game_type = game_type
)

schedule <- pwhl_schedule(
    season_id = season_id
)

schedule$home_team_logo <- team_logo_urls[
    match(
        schedule$home_team,
        names(team_logo_urls)
    )
]

schedule$home_team_code <- team_codes[
    match(
        schedule$home_team,
        names(team_codes)
    )
]

schedule$away_team_logo <- team_logo_urls[
    match(
        schedule$away_team,
        names(team_logo_urls)
    )
]

schedule$away_team_code <- team_codes[
    match(
        schedule$away_team,
        names(team_codes)
    )
]

schedule$game_date <- schedule$game_date |>
str_split_i(
    pattern=",",
    i=-1
) |>
trimws() |>
map(
    parse_schedule_year,
    season_start=season_dates_and_type[
        season_id,
        "start_date"
    ]
)

schedule_to_date <- schedule |>
filter(
    game_date < ymd(current_date)
)


player_boxes_per_game <- list()

for (game_id in schedule_to_date$game_id) {
    player_boxes_per_game[[game_id]] <- pwhl_player_box(
        game_id=game_id
    )
}

rosters_idx_gsheet <- get_google_sheet(
    sheetId = 0
)

team_images <- rosters_idx_gsheet$team_image |>
set_names(
    rosters_idx_gsheet$team_name
)
```

```{r "wringle and wrangle"}
rosters_idx <- rosters_idx_gsheet |>
    select(!(team_name:team_image)) |>
    t() |>
    data.frame() |>
    set_names(
        rosters_idx_gsheet$team_name
    )

team_rosters <- rosters_idx |> map(
    filter_for_roster_idx,
    all_teams = all_teams
)

roster_points_per_game <- get_roster_points_per_game(
    team_rosters,
    player_boxes_per_game
)

standings <- compute_standings(
    roster_points_per_game,
    team_images
)

if (
    as.character(
        last_game_day_date
    ) == "tbd"
) {
    last_game_day_date <- Filter(
        function(x) ymd(x) < ymd(current_date),
        schedule$game_date
    ) |> last()
}



if (
    is.null(
        last_game_day_date
    )
) {
    last_game_day <- FALSE
} else {
    last_game_day <- schedule |>
    filter(
        game_date == ymd(
            last_game_day_date
        )
    ) |> mutate(
        roster_points_per_game[game_id,]
    )
}

if (
    as.character(
        next_game_day_date
    ) == "tbd"
) {
    next_game_day_date <- Filter(
        function(x) ymd(x) >= ymd(current_date),
        schedule$game_date
    )[[1]]
}

next_game_day <- schedule |>
filter(
    game_date == ymd(
        next_game_day_date
    )
)
```

# Overview

## Row

```{r "next game day"}

p_args <- next_game_day |>
mutate(
    temp = paste0(
            home_team_code,
            " @ ",
            away_team_code,
            ", ",
            game_status
        )
) |> select(
    temp
)

p_args <-map(
    p_args[,1],
    p
)

value_box(
    title = "Next game day",
    showcase = bs_icon(
        "calendar-event",
        size="6vh"
    ),
    value = tags$p(
        format(
            next_game_day_date,
            "%b %e, %Y"
        ),
        style = "font-size: 4vh;"
    ),
    theme = "success",
    !!!p_args
)
```

## Row

```{r "last game day"}
if (
    nrow(
        roster_points_per_game
    ) == 0
) {

    value_box(
        title = "No data available",
        showcase = bs_icon(
            "hourglass-split",
            size="6vh"
        ),
        value = tags$p(
            "No games played yet this season",
            style = "font-size: 4vh;"
        ),
        theme = "danger"
    )
} else {

    value_box(
        title = format(
                last_game_day_date,
                "Last game day (%B %e, %Y)"
            ),
        value = last_game_day |> mutate(
            temp = "-"
        ) |> select(
            c(
                "home_team_code",
                "home_team_logo",
                "home_score",
                "temp",
                "away_score",
                "away_team_logo",
                "away_team_code"
            )
        ) |>
        gt() |>
        text_transform(
            locations = cells_body(
                columns = c(
                    "home_team_logo",
                    "away_team_logo"
                )
            ),
            fn = function(x) {
                web_image(
                    url = x,
                    height = "5vh"
                )
            }
        ) |> cols_label(
            home_team_code = "",
            home_team_logo = "Home",
            home_score = "",
            temp = "",
            away_score = "",
            away_team_logo = "Away",
            away_team_code = ""
        ),
        theme = "success"
    )
}

```

## Row

```{r "standings overview"}
#| title: "Standings"
standings |>
select(
    c(
        Team,
        Points
    )
) |>
gt() |>
text_transform(
    locations = cells_body(
        columns = Team
    ),
    fn = function(x) {
        web_image(
            url = x,
            height = "5vh"
        )
    }
)
```

# Team Standings

## Row

```{r "standings full"}
#| title: "Standings"
standings |>
gt() |>
text_transform(
    locations = cells_body(
        columns = Team
    ),
    fn = function(x) {
        web_image(
            url = x,
            height = "5vh"
        )
    }
)
```

## Row

```{r "standings over time"}
#| title: "Standings over time"

if (
    nrow(
        roster_points_per_game
    ) == 0
) {

    value_box(
        title = "No data available",
        showcase = bs_icon(
            "hourglass-split",
            size="6vh"
        ),
        value = tags$p(
            "No games played yet this season",
            style = "font-size: 4vh;"
        ),
        theme = "danger"
    )
} else {

    roster_points_per_game |>
    mutate(
        across(
            names(team_rosters),
            ~ .x |> as.numeric() |> cumsum()
        ),
        game_idx = 1:nrow(
            roster_points_per_game
        )
    ) |>
    pivot_longer(
        cols = names(team_rosters),
        names_to = "team_name",
        values_to = "cum_score"
    ) |>
    ggplot() +
    geom_line(
        aes(
            x = game_idx,
            y = cum_score,
            colour = team_name
        )
    )
}
```

# Team Rosters

## Row {.tabset}

### Noah

```{r}

team_name <- "Noah"

html(
    web_image(
        url = team_images[team_name],
        height = "50px"
    )
)

if (
    "player_headshot" %in% colnames(
        team_rosters[[team_name]]
    )
) {
    team_rosters[[team_name]] |> gt() |> text_transform(
        locations = cells_body(columns = player_headshot),
        fn = function(x) {
            web_image(
                url = x,
                height = "50px"
            )
        }
    )
} else {
    team_rosters[[team_name]] |> gt()
}
```

### Alex

```{r}
team_name <- "Alex"

html(
    web_image(
        url = team_images[team_name],
        height = "50px"
    )
)

if (
    "player_headshot" %in% colnames(
        team_rosters[[team_name]]
    )
) {
    team_rosters[[team_name]] |> gt() |> text_transform(
        locations = cells_body(columns = player_headshot),
        fn = function(x) {
            web_image(
                url = x,
                height = "50px"
            )
        }
    )
} else {
    team_rosters[[team_name]] |> gt()
}
```

### Rambouillet

```{r}
team_name <- "Rambouillet"

html(
    web_image(
        url = team_images[team_name],
        height = "50px"
    )
)

if (
    "player_headshot" %in% colnames(
        team_rosters[[team_name]]
    )
) {
    team_rosters[[team_name]] |> gt() |> text_transform(
        locations = cells_body(columns = player_headshot),
        fn = function(x) {
            web_image(
                url = x,
                height = "50px"
            )
        }
    )
} else {
    team_rosters[[team_name]] |> gt()
}
```

### Meadow

```{r}
team_name <- "Meadow"

html(
    web_image(
        url = team_images[team_name],
        height = "50px"
    )
)

if (
    "player_headshot" %in% colnames(
        team_rosters[[team_name]]
    )
) {
    team_rosters[[team_name]] |> gt() |> text_transform(
        locations = cells_body(columns = player_headshot),
        fn = function(x) {
            web_image(
                url = x,
                height = "50px"
            )
        }
    )
} else {
    team_rosters[[team_name]] |> gt()
}
```