---
title: "PWHL Fantasy League"
author: "TBD"
format: dashboard
---

```{r imports}
library(tidyverse)
library(gt)
library(bslib)
library(shiny)
library(bsicons)
library(DT)

invisible(
    lapply(
        list.files(
            "./R",
            full.names = TRUE
        ),
        source
    )
)
```

```{r "Get season dates and type"}
current_date = today()
current_date = "2024-11-22"

season_dates_and_type <- get_season_dates_and_type()

days_for_current_date <- get_days_for_current_date(
  current_date,
  season_dates_and_type
)

last_game_day_date <- days_for_current_date$last_game_day_date |>
 as.character()
next_game_day_date <- days_for_current_date$next_game_day_date |>
 as.character()
season_id <- days_for_current_date$season_id |>
 as.numeric()
season <- days_for_current_date$season |>
 as.numeric()
game_type <- days_for_current_date$game_type |>
 as.character()
```

```{r "Get team and schedule data"}

team_data_frames <- get_all_teams(
  season_id,
  season,
  game_type
)

team_logo_urls <- team_data_frames["team_logo_urls"][[1]]
teams <- team_data_frames["teams"][[1]]
team_codes <- team_data_frames["team_codes"][[1]]
all_teams <- team_data_frames["all_teams"][[1]]

schedules <- get_schedule(
  season_id,
  team_codes,
  team_logo_urls,
  season_dates_and_type,
  last_game_day_date,
  next_game_day_date,
  current_date
)

schedule <- schedules["schedule"][[1]]
schedule_to_date <- schedules["schedule_to_date"][[1]]
last_game_day_date <- schedules["last_game_day_date"][[1]]
next_game_day_date <- schedules["next_game_day_date"][[1]]
last_game_day <- schedules["last_game_day"][[1]]
next_game_day <- schedules["next_game_day"][[1]]
```

```{r "Get Fantasy teams and standings"}
fantasy_teams_and_standings <- get_fantasy_teams_and_standings(
  all_teams,
  schedule_to_date,
  schedule
)

team_images <- fantasy_teams_and_standings["team_images"][[1]]
team_rosters <- fantasy_teams_and_standings["team_rosters"][[1]]
roster_points_per_game <- fantasy_teams_and_standings["roster_points_per_game"][[1]]
standings <- fantasy_teams_and_standings["standings"][[1]]

if (
    typeof(last_game_day) != "logical"
) {
    last_game_day <- last_game_day |>
    mutate(
        roster_points_per_game[game_id,]
    )
}
```

# Overview

## Row

```{r "next game day"}

p_args <- next_game_day |>
mutate(
    temp = paste0(
            home_team_code,
            " @ ",
            away_team_code,
            ", ",
            game_status
        )
) |> select(
    temp
)

p_args <-map(
    p_args[,1],
    p
)

value_box(
    title = "Next game day",
    showcase = bs_icon(
        "calendar-event",
        size="6vh"
    ),
    value = tags$p(
        format(
            next_game_day_date,
            "%b %e, %Y"
        ),
        style = "font-size: 4vh;"
    ),
    theme = "success",
    !!!p_args
)
```

## Row

```{r "last game day"}
if (
    nrow(
        roster_points_per_game
    ) == 0
) {

    value_box(
        title = "No data available",
        showcase = bs_icon(
            "hourglass-split",
            size="6vh"
        ),
        value = tags$p(
            "No games played yet this season",
            style = "font-size: 4vh;"
        ),
        theme = "danger"
    )
} else {

    value_box(
        title = format(
                last_game_day_date,
                "Last game day (%B %e, %Y)"
            ),
        value = last_game_day |> mutate(
            temp = "-"
        ) |> select(
            c(
                "home_team_code",
                "home_team_logo",
                "home_score",
                "temp",
                "away_score",
                "away_team_logo",
                "away_team_code"
            )
        ) |>
        gt() |>
        text_transform(
            locations = cells_body(
                columns = c(
                    "home_team_logo",
                    "away_team_logo"
                )
            ),
            fn = function(x) {
                web_image(
                    url = x,
                    height = "5vh"
                )
            }
        ) |> cols_label(
            home_team_code = "",
            home_team_logo = "Home",
            home_score = "",
            temp = "",
            away_score = "",
            away_team_logo = "Away",
            away_team_code = ""
        ),
        theme = "success"
    )
}

```

## Row

```{r "standings overview"}
#| title: "Standings"
standings |>
mutate(
    delta = roster_points_per_game |>
    filter(
        game_date == last_game_day_date
    ) |>
    compute_standings(
        team_images
    ) |>
    pull(
        Points
    )
) |>
mutate(
    Points = paste0(
            Points,
            " (+",
            delta,
            ")"
        )
) |> select(
    c(
        Team,
        Points
    )
) |>
gt() |>
text_transform(
    locations = cells_body(
        columns = Team
    ),
    fn = function(x) {
        web_image(
            url = x,
            height = "5vh"
        )
    }
)
```

# Team Standings

## Row

```{r "standings full"}
#| title: "Standings"
standings |>
gt() |>
text_transform(
    locations = cells_body(
        columns = Team
    ),
    fn = function(x) {
        web_image(
            url = x,
            height = "5vh"
        )
    }
)
```

## Row

```{r "standings over time"}
#| title: "Standings over time"

if (
    nrow(
        roster_points_per_game
    ) == 0
) {

    value_box(
        title = "No data available",
        showcase = bs_icon(
            "hourglass-split",
            size="6vh"
        ),
        value = tags$p(
            "No games played yet this season",
            style = "font-size: 4vh;"
        ),
        theme = "danger"
    )
} else {

    roster_points_per_game |>
    mutate(
        across(
            names(team_rosters),
            ~ .x |> as.numeric() |> cumsum()
        ),
        game_idx = 1:nrow(
            roster_points_per_game
        )
    ) |>
    pivot_longer(
        cols = names(team_rosters),
        names_to = "team_name",
        values_to = "cum_score"
    ) |>
    ggplot() +
    geom_line(
        aes(
            x = game_idx,
            y = cum_score,
            colour = team_name
        )
    )
}
```

# Team Rosters

::: {.panel-tabset}

```{r "team rosters"}
#| output: asis
res <- purrr::map_chr(
    unique(names(team_rosters)),
    function(name) {
        knitr::knit_child(
            text = c(
                "## `r name`",
                "", 
                "```{r}",
                "#| echo: false",
                "html(",
                "    web_image(",
                "        url = team_images[[name]],",
                "        height = '50px'",
                "    )",
                ")",
                "team_rosters[[name]] |> gt() |> text_transform(",
                "        locations = cells_body(columns = player_headshot),",
                "        fn = function(x) {",
                "            web_image(",
                "                url = x,",
                "                height = '50px'",
                "            )",
                "        }",
                "    )",
                "```",
                "",
                ""
            ),
            envir = environment(),
            quiet = TRUE
        )
    }
)

cat(res, sep = '\n')
```
:::

# PWHL Rosters

::: {.panel-tabset}

```{r "pwhl rosters"}
#| output: asis
res <- purrr::map_chr(
    teams$team_label,
    function(team_label) {
        knitr::knit_child(
            text = c(
                "## `r team_label`",
                "", 
                "```{r}",
                "all_teams |>",
                "    filter(",
                "        team == team_label",
                "    ) |>",
                "    mutate(",
                "        position = recode(",
                "            position,",
                "            'F' = 'Forwards',",
                "            'D' = 'Defenders',",
                "            'G' = 'Goalies'",
                "        )",
                "    ) |>",
                "    select(",
                "        c(",
                "            'jersey_number',",
                "            'player_headshot',",
                "            'player_name',",
                "            'position',",
                "            'primary_hand',",
                "            'dob',",
                "            'home_town'",
                "        )",
                "    ) |>",
                "    rename(",
                "        c(",
                "            '#' = 'jersey_number',",
                "            Headshot = 'player_headshot',",
                "            Name = 'player_name',",
                "            Pos = 'position',",
                "            Shoots = 'primary_hand',",
                "            DOB = 'dob',",
                "            'Home town' = 'home_town'",
                "        )",
                "    ) |>",
                "    gt(",
                "        groupname_col = 'Pos'",
                "    ) |>",
                "    text_transform(",
                "        locations = cells_body(",
                "            columns = 'Headshot'",
                "        ),",
                "        fn = function(x) {",
                "            web_image(",
                "                url = x,",
                "                height = '50px'",
                "            )",
                "        }",
                "    ) |> cols_label(",
                "        Headshot = ''",
                "    )",
                "```",
                "",
                ""
            ),
            envir = environment(),
            quiet = TRUE
        )
    }
)

cat(res, sep = '\n')
```
:::